Memory.creeps	//Creeps assigned broadly to the empire.

Memory.rooms[room_name]
	.sources[]
		//Properties of the source.
		.id
		.pos{}
		.creeps{}	//Creeps assigned to each source by the builder.
			.harvester[]
			.mtransport[]
			.utransport[]
			.builder[]

		.buildings{}	//Current number of each building assigned to each source.
			.miningcontainer{}
				.x
				.y
				.id
			.extensions[30]
				.x
				.y

		.ideal{}	//Target number of each entity type determined by the roomplanner.
			.extensions
			.harvester
			.mtransport
			.utransport
			.builder
			.miningcontainer

		//Paths relating to the source generated by init.run().
		.mine[].{}
		.minedir	//Spawn direction.
		.mreturn[].{}
		.mfat[].{}
		.upgrade[].{}
		.ureturn[].{}
		//Generated by defender.init().
		.defpaths[exit][].{}
		.dreturn[exit][].{}

	.creeps{}	//Creeps assigned to the room itself.
		.upgrader[]
		.dbuilder[]

	.buildings{}	//Current number of each building assigned to the room.
		.upgradecontainer
			.x
			.y
			.id

	.ideal{}	//Target number of each entity type.
		.upgrader
		.dbuilder
		.upgradecontainer

	.goals{}	//This is a stage of our plan to be reached. We should react when a goal is completed.
		.level
		.extensions

	//Paths relating to the room itself.
	.upgrade[].{}
	.upgradedir	//Spawn direction.
	.exitpaths{room_name}[].{}
	.exitreturn{room_name}[].{}

	//Sets of contiguous exit tiles.
	.exits[]

	//Defense related information.
	.defense{}
		.walls[]
			.x
			.y
		.farwalls[]	//Walls that are out of reach of our defense builders' patrol path.
			.x
			.y
		.safe[]	//Whether each exit is safe or not. (We don't defend safe exits.)
		.towers
			.x
			.y
		.patrol[exit][].{}	//The defense builder's patrol path for each exit.
		.preturn[exit][].{}	//The defense builder's patrol path for each exit.
		.need	//Which exit are we currently servicing? This is incremented when a defense builder begins building.
		.knownwalls[]	//Array of wall ids used by defender.checkdefense() during wall placing process. Probably not needed after they are built.
		.dshort[exit]	//Which source's mine + defpath path is the shortest to the patrol route.